import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'com.google.gms.google-services'
//    id 'com.google.firebase.crashlytics'

}
def flavor
android {
    compileSdk 33

    defaultConfig {
        applicationId "io.sensify.sensor"
        minSdk 24
        targetSdk 33
        versionCode 20
        versionName "3.0.12"


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file("SIGNING_STORE_KEYSTORE")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {
        play {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            dimension "version"
            flavor = "play"
        }
        foss {
            dimension "version"
            applicationIdSuffix ".foss"
            versionNameSuffix "-foss"
            flavor = "foss"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'io.sensify.sensor'
}
def getCurrentVariant() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    println "dsd :" + tskReqStr

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()){
        return matcher.group(1).toLowerCase()
    }else{
        println "NO MATCH FOUND"
        return ""
    }
}

def applyPlugin() {
    def currFlavor = getCurrentVariant()

    if(currFlavor == 'play') {
        println  "currFlavor: "+ currFlavor

        apply plugin: 'com.google.gms.google-services'
        apply plugin: 'com.google.firebase.crashlytics'
    }

    return ""
}


android.applicationVariants.all {
    variant ->
        println  "plugins veriant: " + variant.flavorName
        variant.outputs.all {
            outputFileName = "release.apk"
        }
        if(variant.flavorName == "play"){

            println  "variant.flavorName: play "
//            apply plugin: 'com.google.gms.google-services'
//            apply plugin: 'com.google.firebase.crashlytics'


        }

}
println  "plugins add: " + flavor
//if(flavor == "play") {
//    println  "plugins add: "
//    apply plugin: 'com.google.gms.google-services'
//    apply plugin: 'com.google.firebase.crashlytics'
//
////    id 'com.google.gms.google-services'
////    id 'com.google.firebase.crashlytics'
//}

dependencies {

    //Android Essentials
    implementation "androidx.core:core-ktx:1.8.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "com.google.android.material:material:1.7.0-alpha03"
    implementation "androidx.window:window:1.0.0"
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"

    //Dagger - Hilt
//    implementation "com.google.dagger:hilt-android:2.41"
//    implementation "androidx.hilt:hilt-navigation-fragment:1.0.0"
//    implementation "androidx.lifecycle:lifecycle-service:2.5.1"
//    kapt "com.google.dagger:hilt-android-compiler:2.38.1"
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
//    kapt "androidx.hilt:hilt-compiler:1.0.0"
//    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"


    //Desugaring
//    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.2.0"

    //Compose
    implementation "androidx.activity:activity-compose:1.5.0"
//    implementation "androidx.compose.material:material:1.3.0-alpha02"
//    implementation "androidx.compose.ui:ui-tooling-preview:1.1.1"
    implementation "androidx.compose.material3:material3:1.0.0-alpha15"
    implementation "androidx.compose.material:material-icons-core:1.1.1"
    implementation "androidx.compose.material:material-icons-extended:1.1.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.0-alpha01"
    implementation "androidx.navigation:navigation-compose:2.5.0"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation "androidx.compose.foundation:foundation:1.3.0-alpha02"
//    debugImplementation "androidx.compose.ui:ui-tooling:1.1.1"

    debugImplementation "androidx.compose.ui:ui-tooling:1.2.1"
    implementation "androidx.compose.ui:ui-tooling-preview:1.2.1"

    //Accompanist
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.24.2-alpha"
    implementation "com.google.accompanist:accompanist-flowlayout:0.24.2-alpha"
    implementation "com.google.accompanist:accompanist-pager:0.25.1"
    implementation "com.google.accompanist:accompanist-pager-indicators:0.25.1"
    implementation "com.google.accompanist:accompanist-permissions:0.26.1-alpha"
    implementation "androidx.compose.ui:ui-util:1.3.0-alpha01"

    //Coil
//    implementation "io.coil-kt:coil:2.0.0-rc01"
//    implementation "io.coil-kt:coil-compose:2.0.0-rc01"

    playImplementation platform('com.google.firebase:firebase-bom:31.0.2')
    // When using the BoM, don't specify versions in Firebase dependencies
    playImplementation 'com.google.firebase:firebase-crashlytics-ktx'
    playImplementation 'com.google.firebase:firebase-analytics-ktx'

    //MpChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.3.0-alpha01"
}
project.plugins.each {
    println  "plugins: " + it
}

def sas = applyPlugin()
//print(plu)

//println 'dsds' + System.getenv("SIGNING_STORE_PASSWORD")